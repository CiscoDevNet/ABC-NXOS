
{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "VIRL/CML 2.0 API",
    "description": "API definition for the VIRL/CML network simulation platform.",
    "contact": {
      "name": "API support",
      "url": "http://virl.cisco.com/v2/api",
      "email": "ciscovirl@cisco.com"
    },
    "license": {
      "name": "Copyright (c) 2020 Cisco Systems, Inc. and/or its affiliates",
      "url": "http://virl.cisco.com"
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication API endpoints to acquire an Authentication token. The token must be conveyed as a HTTP header. The name of the header is `Authentication` and the content is `Bearer token-goes-here`"
    },
    {
      "name": "Labs",
      "description": "Web services for the labs themselves, including creating new labs and getting the list of all labs."
    },
    {
      "name": "Nodes",
      "description": "Web services for the nodes in a lab.  Each node represents a deviced in the topology, such as a router, switch, firewall, or host."
    },
    {
      "name": "Interfaces",
      "description": "Web services for the interfaces of nodes in a lab."
    },
    {
      "name": "Links",
      "description": "Web services for the links or connections between nodes in the lab.  Links will generally connect at each end to exactly one interface."
    },
    {
      "name": "Configurations",
      "description": "Web services for the device configurations associated with the nodes in a lab.  Note that these configurations are generally not the running configuration on a running simulation.  They are the configurations applied to a (wiped) node when it is started with no previous state."
    },
    {
      "name": "Runtime",
      "description": "Web services for working with items that are only exposed by the simulation at runtime, such as console connections and packet captures."
    },
    {
      "name": "System",
      "description": "Web services for the underlying VIRL^2 software and the system where it runs."
    },
    {
      "name": "Node Definitions",
      "description": "Node Definitions define the properties of a virtual network node. They are paired with image definitions to define a complete virtual network node."
    },
    {
      "name": "Metadata",
      "description": "Web services that work with the metadata about the topology, such as node type definitions and the state of various objects in the virtual labs."
    },
    {
      "name": "Image Definitions",
      "description": "Web services that work with images that are required to boot a virtual network node."
    }
  ],
  "servers": [
    {
      "url": "/api/v0",
      "description": "This is version zero of the API"
    }
  ],
  "security": [
    {
      "jwt": []
    }
  ],
  "paths": {
    "/authenticate": {
      "post": {
        "summary": "Authenticate to the system, get a web token",
        "operationId": "simple_ui.ui_authentication.authenticate",
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthDataBody"
        },
        "security": [],
        "responses": {
          "200": {
            "description": "The response body is a JSON web token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/user/roles": {
      "get": {
        "summary": "Get roles for this user",
        "operationId": "simple_ui.http_handlers.user_roles_get",
        "responses": {
          "200": {
            "description": "The response body is a JSON list of the roles the user has",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Get the list of available users",
        "operationId": "simple_ui.http_handlers.user_list_get",
        "responses": {
          "200": {
            "description": "The response body is a list of user information objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user_id}/change_password": {
      "parameters": [
        {
          "$ref": "#/components/parameters/UserIdPathParameter"
        }
      ],
      "put": {
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            }
          }
        },
        "summary": "User password change.",
        "description": "Allows a user to change their password. Both old and new password are required. A user with administrative privileges can set a new password by providing an arbitrary or empty old password.",
        "operationId": "simple_ui.http_handlers.user_password_put",
        "responses": {
          "200": {
            "description": "Nothing",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/UserIdPathParameter"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets user info",
        "operationId": "simple_ui.http_handlers.user_info_get",
        "responses": {
          "200": {
            "description": "A user definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes user",
        "operationId": "simple_ui.http_handlers.user_delete",
        "responses": {
          "200": {
            "description": "Nothing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Creates user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.user_post",
        "responses": {
          "200": {
            "description": "Nothing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/licensing": {
      "get": {
        "summary": "Get current licensing configuration and status",
        "operationId": "simple_ui.http_handlers.licensing_status_get",
        "responses": {
          "200": {
            "description": "The response body is a JSON object of current user-facing licensing configuration and status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingStatus"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/tech_support": {
      "get": {
        "summary": "Get current licensing tech support",
        "operationId": "simple_ui.http_handlers.licensing_tech_support_get",
        "responses": {
          "200": {
            "description": "The response body is a JSON object of licensing tech-support information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingStatus"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/authorization/renew": {
      "put": {
        "summary": "Renew licensing authorization with the backend",
        "operationId": "simple_ui.http_handlers.licensing_status_put",
        "responses": {
          "204": {
            "description": "The agent has scheduled an authorization renewal"
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Authorization renewal cannot be requested at this time. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/transport": {
      "put": {
        "summary": "Setup licensing transport configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensingTransport"
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.licensing_transport_put",
        "responses": {
          "200": {
            "description": "The transport configuration has been accepted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LicensingTransport"
                    },
                    {
                      "type": "object",
                      "required": [
                        "default_ssms"
                      ],
                      "properties": {
                        "default_ssms": {
                          "description": "The main production URL which shall be set unless changed by user",
                          "type": "string",
                          "example": "https://tools.cisco.com/its/service/oddce/services/DDCEService"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/certificate": {
      "post": {
        "summary": "Setup a licensing public certificate for internal deployment of an unregistered product instance",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/LicensingPublicCertification"
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.licensing_dev_ca_post",
        "responses": {
          "200": {
            "description": "The certificate was accepted by the agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingPublicCertification"
                }
              }
            }
          },
          "400": {
            "description": "The certificate was rejected by the agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      },
      "delete": {
        "summary": "Clear any licensing public certificate for internal deployment of an unregistered product instance",
        "operationId": "simple_ui.http_handlers.licensing_dev_ca_delete",
        "responses": {
          "200": {
            "description": "The certificate was removed if it existed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LicensingPublicCertification"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The removal was rejected by the agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/registration": {
      "post": {
        "summary": "Setup licensing registration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "description": "A token generated by the target SSMS instance to authorize product to it",
                    "type": "string"
                  },
                  "reregister": {
                    "description": "Request reregistration from the current SSMS",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.licensing_registration_post",
        "responses": {
          "204": {
            "description": "The (re)registration request was accepted by the agent"
          },
          "400": {
            "description": "Invalid input. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "(Re)registration cannot be requested at this time. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/registration/renew": {
      "put": {
        "summary": "Request a renewal of licensing registration against current SSMS",
        "operationId": "simple_ui.http_handlers.licensing_registration_put",
        "responses": {
          "204": {
            "description": "The renewal request was accepted by the agent"
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Registration renewal cannot be requested at this time. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/deregistration": {
      "delete": {
        "summary": "Request deregistration from the current SSMS",
        "operationId": "simple_ui.http_handlers.licensing_registration_delete",
        "responses": {
          "202": {
            "description": "Deregistration has been completed on the Product Instance but was unable to deregister from Smart Software Licensing due to a communication timeout."
          },
          "204": {
            "description": "The Product Instance was successfully deregistered from Smart Software Licensing."
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Deregistration cannot be requested at this time. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/features": {
      "get": {
        "summary": "Get current licensing features",
        "operationId": "simple_ui.http_handlers.licensing_features_get",
        "responses": {
          "200": {
            "description": "The response body is a list of current licensing features",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicensingFeatureFull"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      },
      "patch": {
        "summary": "Update current licensing feature(s)",
        "operationId": "simple_ui.http_handlers.licensing_features_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LicensingFeatureId"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id2": {
                        "description": "Requested count of this feature",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response body is a JSON object of features with updated count of license",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LicensingFeatureId"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id2": {
                          "description": "Updated count of licenses for this feature",
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access is denied. The response body is a JSON object of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/mode": {
      "put": {
        "summary": "Enable or disable reservation mode in unregistered agent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensingReservationMode"
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.licensing_reservation_mode_put",
        "responses": {
          "200": {
            "description": "The reservation mode has been enabled or disabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingReservationMode"
                }
              }
            }
          },
          "409": {
            "description": "License reservation is already enabled. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/request": {
      "post": {
        "summary": "Initiate reservation by generating request code and message to the user.",
        "operationId": "simple_ui.http_handlers.licensing_reservation_request_post",
        "responses": {
          "200": {
            "description": "The reservation request code that must be entered into the CSSM.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingReservationRequestCode"
                }
              }
            }
          },
          "409": {
            "description": "Agent is already registered or reservation mode not enabled. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/complete": {
      "post": {
        "summary": "Complete reservation by installing authorization code from CSSM.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensingAuthorizationCode"
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.licensing_reservation_complete_post",
        "responses": {
          "200": {
            "description": "The confirmation code of the completed reservation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingConfirmationCode"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters or could not validate the key. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "No license reservation is in progress or authorization code does not match the request code. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/cancel": {
      "delete": {
        "summary": "Cancel reservation request without completing it.",
        "operationId": "simple_ui.http_handlers.licensing_reservation_cancel_delete",
        "responses": {
          "204": {
            "description": "The reservation request has been cancelled."
          },
          "409": {
            "description": "No license reservation is in progress. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/release": {
      "delete": {
        "summary": "Return a completed reservation",
        "operationId": "simple_ui.http_handlers.licensing_reservation_release_delete",
        "responses": {
          "200": {
            "description": "The return code of the released reservation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingReturnCode"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "No authorization code instaled in device. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/discard": {
      "delete": {
        "summary": "Discard a reservation authorization code for an already cancelled reservation request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensingAuthorizationCode"
              }
            }
          }
        },
        "operationId": "simple_ui.http_handlers.licensing_reservation_discard_delete",
        "responses": {
          "200": {
            "description": "The discard code for an already cancelled reservation request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingDiscardCode"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing input parameters. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Agent or reservation is not enabled, or reservation request is in progress or authorization code found in TS. The response body is a JSON object of the error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/confirmation_code": {
      "get": {
        "summary": "Get the confirmation code",
        "operationId": "simple_ui.http_handlers.licensing_reservation_confirmation_code_get",
        "responses": {
          "200": {
            "description": "The confirmation code of the completed reservation or null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingConfirmationCode"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      },
      "delete": {
        "summary": "Remove the confirmation code",
        "operationId": "simple_ui.http_handlers.licensing_reservation_confirmation_code_delete",
        "responses": {
          "204": {
            "description": "The confirmation code has been removed"
          },
          "400": {
            "description": "The confirmation code is not defined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/licensing/reservation/return_code": {
      "get": {
        "summary": "Get the return code",
        "operationId": "simple_ui.http_handlers.licensing_reservation_return_code_get",
        "responses": {
          "200": {
            "description": "The return code of the released reservation or null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingReturnCode"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      },
      "delete": {
        "summary": "Remove the return code",
        "operationId": "simple_ui.http_handlers.licensing_reservation_return_code_delete",
        "responses": {
          "204": {
            "description": "The return code has been removed"
          },
          "400": {
            "description": "The return code is not defined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Licensing"
        ]
      }
    },
    "/system_archive": {
      "get": {
        "summary": "Download an archive of user-created system data",
        "operationId": "simple_ui.http_handlers.system_archive",
        "responses": {
          "200": {
            "description": "The response body is an archive of user-created system data, including labs and custom node and image definitions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/sample/labs": {
      "get": {
        "summary": "Get the list of available sample labs",
        "operationId": "simple_ui.http_handlers.sample_lab_list",
        "responses": {
          "200": {
            "description": "The response body is a JSON object of available sample labs with their metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Metadata"
        ]
      }
    },
    "/sample/labs/{lab_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Loads Sample Lab",
        "operationId": "simple_ui.http_handlers.sample_lab_load",
        "responses": {
          "200": {
            "description": "Lab Id of the newly created lab",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab name not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/clear_backups_and_shutdown": {
      "put": {
        "summary": "Remove backups",
        "operationId": "simple_ui.http_handlers.clear_backups_and_shutdown",
        "responses": {
          "200": {
            "description": "Response when successfuly cleared and shut down.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Success"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/node_definitions": {
      "get": {
        "summary": "Get definitions of the types of nodes supported by this system.",
        "operationId": "simple_ui.http_handlers.node_definition_get_list",
        "responses": {
          "200": {
            "description": "The response body is a JSON list of node definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinitionList"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Metadata",
          "Node Definitions"
        ]
      },
      "post": {
        "summary": "Create new node definition",
        "operationId": "simple_ui.http_handlers.node_definitions_post",
        "parameters": [
          {
            "name": "json",
            "in": "query",
            "description": "Switch to fetch in JSON format",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Node definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Node Definitions"
        ]
      },
      "put": {
        "summary": "Update the specified node definition",
        "operationId": "simple_ui.http_handlers.node_definitions_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Node definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Node Definitions"
        ]
      }
    },
    "/node_definitions/{def_id}": {
      "parameters": [
        {
          "name": "def_id",
          "in": "path",
          "description": "ID of the requested type of node",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get the node definition for the specified type of node.",
        "operationId": "simple_ui.http_handlers.node_definitions_get",
        "parameters": [
          {
            "name": "json",
            "in": "query",
            "description": "Switch to fetch in JSON format",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response body is a JSON object that describes the node type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              }
            }
          },
          "404": {
            "description": "Node definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Node Definitions"
        ]
      },
      "delete": {
        "summary": "Remove the specified node definition",
        "operationId": "simple_ui.http_handlers.node_definitions_delete",
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Node definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Node Definitions"
        ]
      }
    },
    "/node_definitions/{def_id}/image_definitions": {
      "parameters": [
        {
          "name": "def_id",
          "in": "path",
          "description": "ID of the requested Node Definition",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get the Image Definition for the specified Node Definition",
        "operationId": "simple_ui.http_handlers.image_definitions_for_nd_id_get",
        "responses": {
          "200": {
            "description": "The response body is a JSON list of Image Definitions for the Node Definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDefinitionList"
                }
              }
            }
          },
          "404": {
            "description": "Node Definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions",
          "Node Definitions"
        ]
      }
    },
    "/list_image_definition_drop_folder": {
      "get": {
        "summary": "Get the list of uploaded images",
        "operationId": "simple_ui.http_handlers.image_definition_dropfolder_list_get",
        "responses": {
          "200": {
            "description": "The response body is a JSON list of uploaded images",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      }
    },
    "/image_definitions": {
      "get": {
        "summary": "Get the list of all Image Definitions",
        "operationId": "simple_ui.http_handlers.image_definitions_list",
        "responses": {
          "200": {
            "description": "The response body is a JSON list of all Image Definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDefinitionList"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      },
      "post": {
        "summary": "Create new Image Definition",
        "operationId": "simple_ui.http_handlers.image_definitions_post",
        "parameters": [
          {
            "name": "json",
            "in": "query",
            "description": "Switch to fetch in JSON format",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Image Definition {def_id} not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Image Definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      },
      "put": {
        "summary": "Update the specified Image Definition",
        "operationId": "simple_ui.http_handlers.image_definitions_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Image Definition {def_id} not valid or read-only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Image Definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      }
    },
    "/image_definitions/{def_id}": {
      "parameters": [
        {
          "name": "def_id",
          "in": "path",
          "description": "ID of the requested Image Definition",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get the specified Image Definition",
        "operationId": "simple_ui.http_handlers.image_definitions_get",
        "parameters": [
          {
            "name": "json",
            "in": "query",
            "description": "Switch to fetch in JSON format",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response body is a JSON object of the requested Image Definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDefinition"
                }
              }
            }
          },
          "404": {
            "description": "Image Definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      },
      "delete": {
        "summary": "Remove the specified Image Definition",
        "operationId": "simple_ui.http_handlers.image_definitions_delete",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Image Definition {def_id} read-only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Image Definition {def_id} not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      }
    },
    "/simplified_node_definitions": {
      "get": {
        "summary": "Get simplified definitions of the types of nodes supported by this system.",
        "operationId": "simple_ui.http_handlers.node_definitions_get_list_ui_transformed",
        "responses": {
          "200": {
            "description": "The response body is a JSON list of node definitions.  These transformed versions include the metadata required by the UI.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinitionList"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System",
          "Node Definitions"
        ]
      }
    },
    "/wait_for_lld_connected": {
      "get": {
        "summary": "This web service blocks and does not return until the LLD connects to the controller.",
        "operationId": "simple_ui.http_handlers.wait_for_lld_connected",
        "responses": {
          "200": {
            "description": "Success."
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/node_definition_schema": {
      "get": {
        "summary": "Returns the JSON schema that defines the node definition objects.",
        "operationId": "simple_ui.http_handlers.node_definition_schema",
        "responses": {
          "200": {
            "description": "Node definition schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinitionSchema"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/lab_schema": {
      "get": {
        "summary": "Returns the JSON schema that defines the lab.",
        "operationId": "simple_ui.http_handlers.lab_schema",
        "responses": {
          "200": {
            "description": "Node definition schem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabSchema"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/labs/{lab_id}/events": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "description": "Get list of events for the specified lab.",
        "operationId": "simple_ui.http_handlers.lab_event_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/external_connections": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "description": "Get list of external connections available for the specified lab.",
        "operationId": "simple_ui.http_handlers.lab_list_ext_conn_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/telemetry_data": {
      "get": {
        "description": "Get list of telemetry events",
        "operationId": "simple_ui.http_handlers.telemetry_data_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Metadata"
        ]
      }
    },
    "/diagnostic_event_data": {
      "get": {
        "description": "Get list of diagnostic events",
        "operationId": "simple_ui.http_handlers.diagnostic_event_data_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Metadata"
        ]
      }
    },
    "/system_health": {
      "get": {
        "description": "Get system health",
        "operationId": "simple_ui.http_handlers.system_health_get",
        "responses": {
          "200": {
            "description": "Health of system. Will be more detailed for an administrator.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Metadata"
        ]
      }
    },
    "/update_lab_topology": {
      "post": {
        "summary": "DEPRECATED  Set the topology for the specified lab_id.",
        "operationId": "simple_ui.http_handlers.update_topology_handler",
        "parameters": [
          {
            "name": "lab_id",
            "in": "query",
            "description": "The ID of the lab to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RESTTopologyBody"
        },
        "responses": {
          "200": {
            "description": "TODO - decide what to do with simple success messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Success"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/build_configurations": {
      "get": {
        "summary": "Generate configurations for the nodes in the topology.",
        "operationId": "simple_ui.http_handlers.build_configurations_manager",
        "parameters": [
          {
            "name": "lab_id",
            "in": "query",
            "description": "The ID of the lab to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/pyats_testbed": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Returns YAML with pyATS testbed for specified lab.",
        "operationId": "simple_ui.http_handlers.get_pyats_testbed",
        "parameters": [
          {
            "name": "hostname",
            "in": "query",
            "description": "The IP of the server to insert into the returned value",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "YAML object with pyATS Testbed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Start the specified lab as a simulation.",
        "operationId": "simple_ui.http_handlers.lab_allocate_and_start",
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Cannot start lab.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found or not allocated to cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Stop the simulation for the specified lab.",
        "operationId": "simple_ui.http_handlers.lab_stop",
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found or not allocated to cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/undo": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Undo the last event for the specified lab.",
        "operationId": "simple_ui.http_handlers.lab_undo",
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found or not allocated to cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/wipe": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Wipe the persisted state for all nodes in this lab.  (Lab must be stopped before it can be wiped.)",
        "operationId": "simple_ui.http_handlers.lab_wipe",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Use a brute-force wipe (to handle cases when lab does not wipe)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found or not allocated to cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/feedback": {
      "post": {
        "summary": "Sends feedback to the product team.",
        "operationId": "simple_ui.http_handlers.feedback_handler",
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/labs": {
      "post": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "The title for the newly created lab. If not provided a title will automatically be generated.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "simple_ui.http_handlers.create_lab_handler",
        "summary": "Create a new lab.",
        "responses": {
          "200": {
            "description": "JSON object with details about the lab that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabDetail"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      },
      "get": {
        "description": "Get a list of labs visible to the user.",
        "operationId": "simple_ui.http_handlers.get_lab_list_handler",
        "responses": {
          "200": {
            "description": "List of labs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "multiple_labs": {
                    "value": [
                      "lab_1",
                      "lab_2"
                    ]
                  },
                  "no_labs": {
                    "value": []
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Returns details about the specified lab.",
        "operationId": "simple_ui.http_handlers.get_lab_info_handler",
        "responses": {
          "200": {
            "description": "JSON object with details about the specified lab.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabDetail"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      },
      "delete": {
        "summary": "Remove the specified lab, if it exists.",
        "operationId": "simple_ui.http_handlers.remove_lab_handler",
        "responses": {
          "200": {
            "description": "Lab successfully deleted."
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/state": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the overall simulation state for the specified lab.",
        "operationId": "simple_ui.http_handlers.lab_sim_state_handler",
        "responses": {
          "200": {
            "description": "Simulation state as a quoted string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabState"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "Metadata"
        ]
      }
    },
    "/system_stats": {
      "get": {
        "summary": "Get statistics (e.g., CPU and memory usasge) about the usage of the system's compute nodes.",
        "operationId": "simple_ui.http_handlers.system_stats_handler",
        "responses": {
          "200": {
            "description": "JSON object with nested information about the controllers and their associated compute nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStats"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/diagnostics": {
      "get": {
        "summary": "Return diagnostic information for the back end systems.",
        "operationId": "simple_ui.http_handlers.diagnostics_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/authok": {
      "get": {
        "summary": "Check whether the API call is properly authenticated",
        "operationId": "simple_ui.http_handlers.auth_ok",
        "responses": {
          "200": {
            "description": "API call was properly authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No proper authentication was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/web_session_timeout": {
      "get": {
        "summary": "Get the Web session timeout in seconds.",
        "operationId": "simple_ui.http_handlers.get_web_session_timeout_handler",
        "responses": {
          "200": {
            "description": "The current timeout in seconds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/web_session_timeout/{timeout}": {
      "patch": {
        "summary": "Set the Web session timeout in seconds.",
        "operationId": "simple_ui.http_handlers.set_web_session_timeout_handler",
        "parameters": [
          {
            "name": "timeout",
            "in": "path",
            "description": "The web session timeout in seconds",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 604800
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The web session timeout was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/mac_address_block": {
      "get": {
        "summary": "Get the MAC address block used on this controller (value from 0-7).",
        "operationId": "simple_ui.http_handlers.get_mac_address_block_handler",
        "responses": {
          "200": {
            "description": "The block that is in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/mac_address_block/{block}": {
      "patch": {
        "summary": "Set the MAC address block to use (0-7).",
        "operationId": "simple_ui.http_handlers.set_mac_address_block_handler",
        "parameters": [
          {
            "name": "block",
            "in": "path",
            "description": "The block that should be used",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 7
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The MAC address block was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system_information": {
      "get": {
        "summary": "Get information about the system where the application runs. This API call can be called without authentication.",
        "operationId": "simple_ui.http_handlers.system_information_handler",
        "security": [],
        "responses": {
          "200": {
            "description": "A JSON object with information on the installed system. It returns the system version and whether the system is read or not.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInformation"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/websocket_status": {
      "get": {
        "summary": "Get information about the web sockets in use by the system.",
        "operationId": "simple_ui.http_handlers.websocket_status_handler",
        "responses": {
          "200": {
            "description": "A JSON object with information about the current web sockets.",
            "$ref": "#/components/responses/WebSocketStatusResponse"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/populate_lab_tiles": {
      "get": {
        "summary": "Get the list of labs.",
        "operationId": "simple_ui.http_handlers.populate_labs_handler",
        "responses": {
          "200": {
            "description": "A JSON object where the keys are the lab IDs and the values are",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/topology": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the topology for the specified lab.",
        "operationId": "simple_ui.http_handlers.get_lab_topology_handler",
        "parameters": [
          {
            "name": "exclude_configurations",
            "in": "query",
            "description": "Specify if to exclude configurations",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The topology for the specified lab as a JSON object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RESTTopology"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found or topology not set for lab, yet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/tile": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the info required to present the lab 'tile' on the main page of the UI.",
        "operationId": "simple_ui.http_handlers.get_lab_tile_handler",
        "responses": {
          "200": {
            "description": "JSON object with a subset of information about the lab needed to display a lab preview in the UI.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found, or no topology was set for the lab.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/keys/console": {
      "get": {
        "summary": "Get the console keys for all consoles.",
        "operationId": "simple_ui.http_handlers.get_all_console_keys_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Runtime"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/keys/console": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Returns the key for the specified console.",
        "operationId": "simple_ui.http_handlers.get_console_key_for_lab_node",
        "parameters": [
          {
            "name": "line",
            "in": "query",
            "description": "The optional line number of the serial device, if not provided\nit is assumed to be zero, e.g. the first line, usually the console.\n",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The key of the console for the specified node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified simulation not found or no console key for specified node.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Runtime"
        ]
      }
    },
    "/keys/vnc": {
      "get": {
        "summary": "Get all keys to access nodes via VNC.",
        "operationId": "simple_ui.http_handlers.get_all_vnc_keys_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Runtime"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/keys/vnc": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Returns the key to access the node via VNC.",
        "operationId": "simple_ui.http_handlers.get_vnc_key_for_lab_node",
        "responses": {
          "200": {
            "description": "The key to access the specified node via VNC.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified simulation not found or no VNC key for specified node.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Runtime"
        ]
      }
    },
    "/labs/{lab_id}/simulation_stats": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get information about the specified simulation, such as the amount of CPU its nodes are consuming.",
        "operationId": "simple_ui.http_handlers.simulation_stats_handler",
        "responses": {
          "200": {
            "description": "A JSON object with information about the nodes and links in the simulation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "Metadata"
        ]
      }
    },
    "/import": {
      "post": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "The title for the newly created lab.  If not provided a title will automatically be generated.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_json",
            "in": "query",
            "description": "Legacy mode for json-format ng topologies",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "summary": "Create a lab from the specified topology, specified in the VIRL^2 YAML format (with backwards support for VIRL^2 JSON).",
        "operationId": "simple_ui.http_handlers.import_ng_handler",
        "requestBody": {
          "$ref": "#/components/requestBodies/VIRLv2ImportBody"
        },
        "responses": {
          "200": {
            "description": "VIRL2 lab import was successful",
            "$ref": "#/components/responses/ImportLabResponse"
          },
          "400": {
            "description": "import failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/import/virl-1x": {
      "post": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "The title for the newly-created lab.  If not provided, a title will be generated for you.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Create a lab from the specified VIRL v1.x topology file contents.",
        "operationId": "simple_ui.http_handlers.import_1dotx_handler",
        "requestBody": {
          "$ref": "#/components/requestBodies/VIRL1.xImportBody"
        },
        "responses": {
          "200": {
            "description": "VIRL 1.x file import successful",
            "$ref": "#/components/responses/ImportLabResponse"
          },
          "400": {
            "description": "import failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/nodes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "post": {
        "summary": "Add a node to the specified lab.",
        "operationId": "simple_ui.http_handlers.post_node_handler",
        "parameters": [
          {
            "name": "populate_interfaces",
            "in": "query",
            "description": "Specify true to automatically create pre-defined number of interfaces",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CoreNodeBody"
        },
        "responses": {
          "200": {
            "description": "ID of the node that was created.",
            "$ref": "#/components/responses/IdResponse"
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "Nodes"
        ]
      },
      "get": {
        "summary": "Get a list of all of the node IDs in the specified lab.",
        "operationId": "simple_ui.http_handlers.get_lab_nodes_handler",
        "responses": {
          "200": {
            "description": "The response body is a JSON array of the node IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "multiple_labs": {
                    "value": [
                      "n0",
                      "n1"
                    ]
                  },
                  "no_labs": {
                    "value": []
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/download": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Download the lab",
        "operationId": "simple_ui.http_handlers.download_lab_handler",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/x-yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/notes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Set the notes of the specified lab.",
        "operationId": "simple_ui.http_handlers.put_lab_notes_handler",
        "parameters": [
          {
            "$ref": "#/components/parameters/OriginUuidQueryParameter"
          }
        ],
        "requestBody": {
          "description": "The new lab notes, as a string.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/title": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Set the title of the specified lab.",
        "operationId": "simple_ui.http_handlers.put_lab_title_handler",
        "parameters": [
          {
            "$ref": "#/components/parameters/OriginUuidQueryParameter"
          }
        ],
        "requestBody": {
          "description": "The lab's new title, as a string.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/description": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "put": {
        "summary": "Set the description of the specified lab.",
        "operationId": "simple_ui.http_handlers.put_lab_description_handler",
        "parameters": [
          {
            "$ref": "#/components/parameters/OriginUuidQueryParameter"
          }
        ],
        "requestBody": {
          "description": "The lab's new description, as a string.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.  It is safe to ignore the response content for now.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs"
        ]
      }
    },
    "/labs/{lab_id}/interfaces": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "post": {
        "summary": "Create one or more interfaces.",
        "operationId": "simple_ui.http_handlers.post_interface_handler",
        "requestBody": {
          "$ref": "#/components/requestBodies/InterfaceRequestBody"
        },
        "responses": {
          "200": {
            "description": "Returns a JSON object that identifies the interface that was created.  In the case of bulk interface creation, returns a JSON array of such objects.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InterfaceDescriptor"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InterfaceDescriptor"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found or physical configuration locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "Interfaces"
        ]
      }
    },
    "/labs/{lab_id}/links": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "post": {
        "summary": "Create a link or physical connection between the two interfaces in the specified topology.",
        "operationId": "simple_ui.http_handlers.post_link_handler",
        "requestBody": {
          "description": "The body is a JSON object that indicates the source and destination interfaces of the link to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkDescriptor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ID of the link that was created.",
            "$ref": "#/components/responses/IdResponse"
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "Links"
        ]
      }
    },
    "/labs/{lab_id}/lab_element_state": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the state of all nodes, interfaces, and links in the lab.",
        "operationId": "simple_ui.http_handlers.lab_element_state_handler",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ElementStateResponse"
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "Metadata"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/state": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the state of the specified node in the specified lab.",
        "operationId": "simple_ui.http_handlers.get_node_state_handler",
        "responses": {
          "200": {
            "description": "The response body is a JSON object with state information about the specified node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "state": {
                      "type": "string"
                    },
                    "progress": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Metadata"
        ]
      }
    },
    "/labs/{lab_id}/check_if_converged": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Wait for convergence.",
        "operationId": "simple_ui.http_handlers.converged_lab_handler",
        "responses": {
          "200": {
            "description": "The response body is a JSON object with a boolean indicating if convergence has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Labs",
          "System"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/check_if_converged": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "put": {
        "summary": "Wait for convergence.",
        "operationId": "simple_ui.http_handlers.converged_node_handler",
        "responses": {
          "200": {
            "description": "The response body is a JSON object with a boolean indicating if convergence has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "System"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}/check_if_converged": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "put": {
        "summary": "Wait for convergence.",
        "operationId": "simple_ui.http_handlers.converged_link_handler",
        "responses": {
          "200": {
            "description": "The response body is a JSON object with a boolean indicating if convergence has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links",
          "System"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/state/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "put": {
        "summary": "Start the specified node in the specified lab.",
        "operationId": "simple_ui.http_handlers.start_node_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/state/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "put": {
        "summary": "Stop the specified node in the specified lab.",
        "operationId": "simple_ui.http_handlers.stop_node_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/wipe_disks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "put": {
        "summary": "Wipe the presisted disk image for the specified node in the specified lab.",
        "operationId": "simple_ui.http_handlers.wipe_node_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/extract_configuration": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "put": {
        "summary": "Update the configuration for the specified node in the specified lab from the running node",
        "operationId": "simple_ui.http_handlers.extract_node_configuration_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/interfaces": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the interfaces for the specified node in the specifid lab.",
        "operationId": "simple_ui.http_handlers.get_node_interfaces_handler",
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "description": "Specify true if the service should include data about each interface instead of just the list of interfaces.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      }
    },
    "/labs/{lab_id}/interfaces/{interface_id}/state": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/InterfaceIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the state for the specified interface in the specified lab.",
        "operationId": "simple_ui.http_handlers.get_interface_state_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces",
          "Metadata"
        ]
      }
    },
    "/labs/{lab_id}/interfaces/{interface_id}/state/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/InterfaceIdPathParameter"
        }
      ],
      "put": {
        "summary": "Stop the specified interface.",
        "operationId": "simple_ui.http_handlers.stop_interface_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      }
    },
    "/labs/{lab_id}/interfaces/{interface_id}/state/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/InterfaceIdPathParameter"
        }
      ],
      "put": {
        "summary": "Start the specified interface",
        "operationId": "simple_ui.http_handlers.start_interface_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}/capture/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "put": {
        "summary": "Start a packet capture on the specified link.",
        "operationId": "simple_ui.http_handlers.put_link_capture_start_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}/capture/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "put": {
        "summary": "Stop the packet capture on the specified link.",
        "operationId": "simple_ui.http_handlers.put_link_capture_stop_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}/capture/key": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "get": {
        "summary": "Gets the key or ID for the packet capture running on the specified link.",
        "operationId": "simple_ui.http_handlers.get_pcap_key_for_lab_link",
        "responses": {
          "200": {
            "description": "The key of the packet capture for the specified link's packet capture, as a JSON string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified simulation not found or no packet capture running on the specified link.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links",
          "Runtime"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}/state/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "put": {
        "summary": "Start the specified link.",
        "operationId": "simple_ui.http_handlers.put_link_start_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}/state/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "put": {
        "summary": "Stop the specified link.",
        "operationId": "simple_ui.http_handlers.put_link_stop_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/config": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the initial bootstrap configuration for the specified node.",
        "operationId": "simple_ui.http_handlers.node_config_get",
        "responses": {
          "200": {
            "description": "The response body is the text of the initial configuration for the node.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Configurations"
        ]
      },
      "put": {
        "summary": "Set the initial bootstrap configuration for the specified node.",
        "operationId": "simple_ui.http_handlers.node_config_put",
        "parameters": [
          {
            "$ref": "#/components/parameters/OriginUuidQueryParameter"
          }
        ],
        "requestBody": {
          "description": "The new initial bootstrap config for the node, as raw text.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The node ID of the node whose config was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/find/node/label/{search_query}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/SearchQueryPathParameter"
        }
      ],
      "get": {
        "summary": "Search for the node label matching the query within all nodes of the given lab.",
        "description": "Find the node within a given lab which matches the label. Note that labels have to be unique so the result is either one node or null.",
        "operationId": "simple_ui.http_handlers.node_by_label_get",
        "responses": {
          "200": {
            "description": "Returns the node that matches the query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "nullable": true,
                  "description": "The node matching the label. Or null",
                  "example": "n10"
                },
                "examples": {
                  "found": {
                    "value": "n10",
                    "summary": "node n10 matched the query"
                  },
                  "not_found": {
                    "value": null,
                    "summary": "nothing was found matching the query"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The Specified lab was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/find_all/node/tag/{search_query}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/SearchQueryPathParameter"
        }
      ],
      "get": {
        "summary": "Search for nodes matching the given tags within all labs.",
        "operationId": "simple_ui.http_handlers.node_tag_findall",
        "responses": {
          "200": {
            "description": "Nodes matching the tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/tags/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the tags for the specified node.",
        "operationId": "simple_ui.http_handlers.node_tags_get",
        "responses": {
          "200": {
            "description": "A list of tags for the specified node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/tags/{tag}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/TagPathParameter"
        }
      ],
      "post": {
        "summary": "Add the tag to the lab/node specified.",
        "operationId": "simple_ui.http_handlers.node_tag_post",
        "responses": {
          "200": {
            "description": "The node ID of the node to which the tag was added.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Configurations"
        ]
      },
      "delete": {
        "summary": "Delete tag for the specified node.",
        "operationId": "simple_ui.http_handlers.node_tag_delete",
        "requestBody": {
          "description": "The tag to delete.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The node ID of the node whose tag was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/image_definition": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the image definition for the specified lab/node.",
        "operationId": "simple_ui.http_handlers.node_image_definition_get",
        "responses": {
          "200": {
            "description": "The response body is the text of the image definition for the node.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "put": {
        "summary": "Set the image definition for the specified node.",
        "operationId": "simple_ui.http_handlers.node_image_definition_put",
        "requestBody": {
          "description": "The text of the image definition for the node.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The node ID of the node whose image definition was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes",
          "Configurations"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the details for the specified node",
        "operationId": "simple_ui.http_handlers.node_view_get",
        "parameters": [
          {
            "name": "simplified",
            "in": "query",
            "description": "Specify true if the service should return a simplified version of the object",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      },
      "patch": {
        "summary": "Update details for the specified node.",
        "operationId": "simple_ui.http_handlers.node_view_patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/OriginUuidQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The node ID of the node that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      },
      "delete": {
        "summary": "Delete the specified node.",
        "operationId": "simple_ui.http_handlers.node_view_delete",
        "responses": {
          "200": {
            "description": "The node ID of the deleted node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified node or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/interfaces/{interface_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/InterfaceIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the details for the specified interface",
        "operationId": "simple_ui.http_handlers.interface_view_get",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      },
      "put": {
        "summary": "Set the details for the specified interface.",
        "operationId": "simple_ui.http_handlers.interface_view_put",
        "responses": {
          "200": {
            "description": "The interface ID of the interface that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      },
      "patch": {
        "summary": "Set the details for the specified interface.",
        "operationId": "simple_ui.http_handlers.interface_view_patch",
        "responses": {
          "200": {
            "description": "Success."
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      },
      "delete": {
        "summary": "Delete the specified interface.",
        "operationId": "simple_ui.http_handlers.interface_view_delete",
        "responses": {
          "200": {
            "description": "Success."
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Interfaces"
        ]
      }
    },
    "/labs/{lab_id}/links/{link_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/LinkIdPathParameter"
        }
      ],
      "get": {
        "summary": "Get the details for the specified link.",
        "operationId": "simple_ui.http_handlers.link_view_get",
        "parameters": [
          {
            "name": "simplified",
            "in": "query",
            "description": "Specify true if the service should return a simplified version of the object",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      },
      "put": {
        "summary": "Set the details for the specified link",
        "operationId": "simple_ui.http_handlers.link_view_put",
        "responses": {
          "200": {
            "description": "The link ID of the link that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Specified interface or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      },
      "patch": {
        "summary": "Set the details for the specified link",
        "operationId": "simple_ui.http_handlers.link_view_patch",
        "responses": {
          "200": {
            "description": "Success."
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      },
      "delete": {
        "summary": "Delete the specified link",
        "operationId": "simple_ui.http_handlers.link_view_delete",
        "responses": {
          "200": {
            "description": "Success."
          },
          "404": {
            "description": "Specified link or lab not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Links"
        ]
      }
    },
    "/labs/{lab_id}/nodes/{node_id}/layer3_addresses": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/NodeIdPathParameter"
        }
      ],
      "get": {
        "summary": "Return the node's allocated L3 addresses if the node is connected to an L2 external connector (in bridge mode, when acquired via DHCP)",
        "operationId": "simple_ui.http_handlers.get_lab_node_layer3_addresses_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/labs/{lab_id}/layer3_addresses": {
      "parameters": [
        {
          "$ref": "#/components/parameters/LabIdPathParameter"
        }
      ],
      "get": {
        "summary": "Return the allocated L3 addresses for all nodes if the node is connected to an L2 external connector (in bridge mode, when acquired via DHCP)",
        "operationId": "simple_ui.http_handlers.get_lab_layer3_addresses_handler",
        "responses": {
          "200": {
            "description": "A freeform JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        },
        "tags": [
          "Node Definitions"
        ]
      }
    },
    "/images/upload": {
      "post": {
        "summary": "Upload a disk / reference platform image. The filename must be provided in X-Original-File-Name",
        "operationId": "simple_ui.http_handlers.disk_image_upload",
        "parameters": [
          {
            "in": "header",
            "name": "x-original-file-name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response when successfuly uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Success"
                }
              }
            }
          },
          "400": {
            "description": "x-original-file-name header is missing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      }
    },
    "/images/manage/{filename}": {
      "delete": {
        "summary": "Delete a disk / reference platform image.",
        "operationId": "simple_ui.http_handlers.image_definition_dropfolder_remove",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "description": "Filename to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response when successfuly uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Success"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Image Definitions"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "x-bearerInfoFunc": "simple_ui.ui_authentication.decode_token"
      }
    },
    "responses": {
      "ImportLabResponse": {
        "description": "Successful lab import.  The response has the lab ID and potential warnings as text / Markdown.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ImportLabObject"
            }
          }
        }
      },
      "IdResponse": {
        "description": "Successful POST / Create operation.  The response body is a JSON object that indicates the ID of the created object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IdObject"
            }
          }
        }
      },
      "ElementStateResponse": {
        "description": "JSON object with the state of all nodes, interfaces, and links in the lab.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "nodes",
                "links",
                "interfaces"
              ],
              "properties": {
                "nodes": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "interfaces": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "WebSocketStatusResponse": {
        "description": "(**Placeholder**)  Expect the fields and values to change in the future.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "clients": {
                  "type": "string"
                },
                "capture_websockets": {
                  "type": "string"
                },
                "capture_server_stream": {
                  "type": "string"
                },
                "lld_websocket": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "LinkDescriptor": {
        "required": [
          "src_int",
          "dst_int"
        ],
        "properties": {
          "src_int": {
            "type": "string"
          },
          "dst_int": {
            "type": "string"
          }
        }
      },
      "InterfaceDescriptor": {
        "required": [
          "id",
          "label",
          "slot"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "slot": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "RESTNode": {
        "description": "Special exchange format for the node details in JSON format.",
        "required": [
          "id",
          "data"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "x": {
                "type": "integer"
              },
              "y": {
                "type": "integer"
              },
              "label": {
                "type": "string",
                "description": "A label for the specified node"
              },
              "node_definition": {
                "type": "string",
                "description": "Node Definition ID for the specified node"
              },
              "image_definition": {
                "type": "string",
                "description": "Image Definition ID for the specified node"
              },
              "state": {
                "type": "string",
                "description": "The status of the node in the lab."
              },
              "configuration": {
                "type": "string",
                "description": "The initial bootstrap configuration for the node."
              }
            }
          }
        }
      },
      "RESTLink": {
        "description": "Special exchange format for the link details in JSON format.",
        "required": [
          "id",
          "interface_a",
          "interface_b"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "interface_a": {
            "type": "string"
          },
          "interface_b": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "src_int": {
                "type": "string"
              },
              "dst_int": {
                "type": "string"
              },
              "state": {
                "description": "The status of the link in the lab.",
                "type": "string"
              }
            }
          }
        }
      },
      "RESTInterface": {
        "description": "Special exchange format for the interface details in JSON format.",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "node": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "slot": {
                "type": "integer",
                "nullable": true
              },
              "state": {
                "description": "The status of the interface in the lab.",
                "type": "string"
              }
            }
          }
        }
      },
      "AuthData": {
        "description": "Authentication Data Object\n",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RESTTopology": {
        "description": "A JSON object that describes topology, including its nodes, interfaces, links, and details, such as the user-supplied title and notes.",
        "required": [
          "nodes",
          "links",
          "interfaces"
        ],
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RESTNode"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RESTLink"
            }
          },
          "interfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RESTInterface"
            }
          },
          "lab_notes": {
            "type": "string"
          },
          "lab_title": {
            "type": "string"
          },
          "lab_description": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "number",
            "format": "double"
          },
          "cluster_id": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string"
          }
        }
      },
      "LabDetail": {
        "description": "Metadata about the state of the lab itself",
        "required": [
          "id",
          "lab_title",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal, unique ID for the lab."
          },
          "state": {
            "$ref": "#/components/schemas/LabState"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the lab was created."
          },
          "lab_title": {
            "type": "string",
            "description": "A short, user-specified title for the lab."
          },
          "lab_description": {
            "type": "string",
            "description": "An optional description for the lab."
          },
          "node_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of nodes (or devices) in the lab."
          },
          "link_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of connections between nodes in the lab."
          }
        }
      },
      "LabSchema": {
        "type": "object",
        "items": {
          "$ref": "#/components/schemas/LabSchema"
        }
      },
      "LabState": {
        "type": "string",
        "description": "The overall state of the lab.",
        "enum": [
          "DEFINED_ON_CORE",
          "SETUP",
          "STARTED",
          "STOPPED",
          "UNDEFINED",
          "DEFINED_ON_CLUSTER",
          "WIPED"
        ]
      },
      "NodeDefinition": {
        "required": [
          "id",
          "data"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A symbolic name used to identify this node definitions, such as `iosv` or `asav`."
          },
          "data": {
            "type": "object",
            "description": "TODO define the schema of the underlying 'data'",
            "additionalProperties": true
          }
        },
        "example": {
          "id": "iosv",
          "data": "to-be-finalized"
        }
      },
      "NodeDefinitionList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NodeDefinition"
        }
      },
      "NodeDefinitionSchema": {
        "type": "object",
        "items": {
          "$ref": "#/components/schemas/NodeDefinitionSchema"
        }
      },
      "ImageDefinition": {
        "required": [
          "id",
          "node_definition_id",
          "label",
          "disk_image"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A symbolic name used to identify this Image Definition"
          },
          "node_definition_id": {
            "type": "string",
            "description": "Node Definition ID for the Image Definition"
          },
          "description": {
            "type": "string",
            "description": "An optional description for the Image Definition"
          },
          "label": {
            "type": "string",
            "description": "A required label for the Image Definition"
          },
          "disk_image": {
            "type": "string",
            "description": "A source image for the Image Definition"
          },
          "read_only": {
            "type": "boolean",
            "description": "Whether the Image Definition can be updated or deleted",
            "default": false
          },
          "ram": {
            "type": "integer",
            "description": "Memory (MiB)"
          },
          "cpus": {
            "type": "integer",
            "description": "CPUs"
          },
          "data_volume": {
            "type": "integer",
            "description": "Data Disk Size (GiB)"
          },
          "boot_disk_size": {
            "type": "integer",
            "description": "Boot Disk Size (GiB)"
          },
          "disk_subfolder": {
            "type": "string",
            "description": "A sub-folder where the Image Definition is stored"
          }
        },
        "example": {
          "id": "alpine-3-10-base",
          "node_definition_id": "lxc",
          "description": "Alpine Linux and network tools",
          "label": "Alpine 3.10",
          "disk_image": "alpine-3-10-basee.qcow2",
          "read_only": true,
          "ram": null,
          "cpus": null,
          "data_volume": null,
          "boot_disk_size": null,
          "disk_subfolder": "alpine-3-10-base"
        }
      },
      "ImageDefinitionList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ImageDefinition"
        }
      },
      "ClusterNodeInformation": {
        "description": "The system information for a particular cluster compute node.",
        "required": [
          "cpu",
          "memory"
        ],
        "properties": {
          "cpu": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "memory": {
            "type": "object",
            "properties": {
              "percent": {
                "type": "number",
                "format": "float"
              }
            }
          }
        }
      },
      "SystemInformation": {
        "required": [
          "version",
          "ready"
        ],
        "properties": {
          "version": {
            "type": "string"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "SystemStats": {
        "description": "The system information for this back end.  The basic structure is a nested dictionary from (cluster name to (a dictionary from compute node names in that cluster to information about those compute nodes)).",
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/ClusterNodeInformation"
          }
        }
      },
      "PasswordChange": {
        "description": "Data required for a password change. Both are required.",
        "type": "object",
        "required": [
          "old_password",
          "new_password"
        ],
        "properties": {
          "old_password": {
            "type": "string"
          },
          "new_password": {
            "type": "string"
          }
        }
      },
      "CreateUser": {
        "description": "Information needed to create a new user.",
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "the cleartext password for this user",
            "example": "super-secret"
          },
          "fullname": {
            "type": "string",
            "description": "the full name of the user",
            "example": "Dr. Super User"
          },
          "description": {
            "type": "string",
            "description": "additional, textual free-form detail of the user",
            "example": "Rules the network simulation world, location: unknown"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "admin"
            ],
            "description": "User roles. Case insensitive User or Admin. When empty or not present, assumes User"
          },
          "context": {
            "type": "object",
            "description": "key/value pairs with additional Data"
          }
        }
      },
      "UserInfo": {
        "description": "Information about a single user.",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "the user name",
            "example": "admin"
          },
          "user_id": {
            "type": "number",
            "description": "a numerical user ID",
            "example": 101
          },
          "fullname": {
            "type": "string",
            "description": "the full name of the user",
            "example": "Dr. Super User"
          },
          "description": {
            "type": "string",
            "description": "additional, textual free-form detail of the user",
            "example": "Rules the network simulation world, location: unknown"
          },
          "context": {
            "type": "object",
            "description": "key/value pairs with additional Data"
          },
          "created": {
            "type": "string",
            "description": "the create date of the user, a string in ISO8601 format",
            "example": "2019-02-28T07:33:47+00:00"
          },
          "modified": {
            "type": "string",
            "description": "last modification date of the user, a string in ISO8601 format",
            "example": "2019-02-28T07:33:47+00:00"
          }
        }
      },
      "LicensingStatus": {
        "description": "Configuration and status of Smart Licensing",
        "type": "object",
        "properties": {
          "udi": {
            "description": "The product instance identifier",
            "type": "string"
          },
          "registration": {
            "description": "Product registration status",
            "type": "object",
            "properties": {
              "status": {
                "description": "The current registration status of this product instance",
                "type": "string"
              },
              "smart_account": {
                "description": "Name of the customer Smart Account associated with registration",
                "type": "string",
                "nullable": true
              },
              "virtual_account": {
                "description": "Name of the virtual sub-account associated with registration",
                "type": "string",
                "nullable": true
              },
              "instance_name": {
                "description": "Name of this product instance within SSM associated with registration",
                "type": "string",
                "nullable": true
              },
              "register_time": {
                "$ref": "#/components/schemas/LicensingTimeInfo"
              },
              "renew_time": {
                "$ref": "#/components/schemas/LicensingTimeInfo"
              },
              "expires": {
                "description": "The time current valid registration is due to expire",
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "authorization": {
            "description": "Product overall feature authorization status",
            "type": "object",
            "properties": {
              "status": {
                "description": "The current authorization status of this product instance",
                "type": "string"
              },
              "renew_time": {
                "$ref": "#/components/schemas/LicensingTimeInfo"
              },
              "expires": {
                "description": "The time current valid authorization is due to expire",
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "reservation_mode": {
            "description": "The current reservation mode status",
            "type": "boolean"
          },
          "transport": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LicensingTransport"
              },
              {
                "type": "object",
                "required": [
                  "default_ssms"
                ],
                "properties": {
                  "default_ssms": {
                    "description": "The main production URL which shall be set unless changed by user",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicensingFeature"
            }
          }
        }
      },
      "LicensingFeatureFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensingFeature"
          },
          {
            "type": "object",
            "properties": {
              "min": {
                "description": "Current authorization status for this individual feature",
                "type": "integer",
                "format": "int32"
              },
              "max": {
                "description": "Current authorization status for this individual feature",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "LicensingFeature": {
        "description": "Individually licensed feature description",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensingFeatureId"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "Short name of the feature",
                "type": "string"
              },
              "description": {
                "description": "Description of the feature",
                "type": "string"
              },
              "version": {
                "description": "Version of the feature",
                "type": "string"
              },
              "in_use": {
                "description": "Currently requested count of uses for this feature",
                "type": "integer",
                "format": "int32"
              },
              "status": {
                "description": "Current authorization status for this individual feature",
                "type": "string"
              }
            }
          }
        ]
      },
      "LicensingFeatureId": {
        "description": "Individually licensed feature description",
        "type": "object",
        "properties": {
          "id": {
            "description": "Requested count of licenses for this feature",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LicensingTimeInfo": {
        "description": "Timing information on communication with SSMS",
        "type": "object",
        "required": [
          "succeeded",
          "attempted",
          "scheduled",
          "status",
          "failure",
          "success"
        ],
        "properties": {
          "succeeded": {
            "description": "The time when the given request last completed with success",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attempted": {
            "description": "The time when the given request was last made",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scheduled": {
            "description": "The time when the given request will be made next without intervention",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "description": "The status result of the last attempt",
            "type": "string",
            "nullable": true
          },
          "failure": {
            "description": "The failure reason of the last attempt",
            "type": "string",
            "nullable": true
          },
          "success": {
            "description": "The status of the last communication attempt",
            "type": "string",
            "nullable": true
          }
        }
      },
      "LicensingTransport": {
        "description": "Configuration for Smart Licensing transport",
        "type": "object",
        "required": [
          "ssms",
          "proxy"
        ],
        "properties": {
          "ssms": {
            "description": "The URL",
            "type": "string",
            "nullable": true,
            "default": "https://tools.cisco.com/its/service/oddce/services/DDCEService",
            "example": "https://ssms-satellite.example.com:8443/Transportgateway/services/DeviceRequestHandler"
          },
          "proxy": {
            "$ref": "#/components/schemas/LicensingTransportProxy"
          }
        }
      },
      "LicensingTransportProxy": {
        "description": "HTTP Proxy to contact SSMS",
        "type": "object",
        "required": [
          "server",
          "port"
        ],
        "properties": {
          "server": {
            "description": "Domain name of the HTTP proxy server",
            "type": "string",
            "nullable": true,
            "example": "lab-proxy.example.com"
          },
          "port": {
            "description": "Port of the HTTP proxy server",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 80
          }
        }
      },
      "LicensingPublicCertification": {
        "description": "Contents of the public certificate in PEM format",
        "type": "string"
      },
      "LicensingReservationMode": {
        "description": "The license reservation feature status",
        "type": "boolean"
      },
      "LicensingReservationRequestCode": {
        "description": "Reservation request code for the CSSM",
        "type": "string"
      },
      "LicensingAuthorizationCode": {
        "description": "Authorization request code from the CSSM",
        "type": "string"
      },
      "LicensingConfirmationCode": {
        "description": "The confirmation code from a completed reservation",
        "type": "string"
      },
      "LicensingReturnCode": {
        "description": "The return code from a released reservation",
        "type": "string"
      },
      "LicensingDiscardCode": {
        "description": "The discard code for an already cancelled reservation",
        "type": "string"
      },
      "Error": {
        "required": [
          "code",
          "description"
        ],
        "properties": {
          "code": {
            "description": "The HTTP status that was associated with this error.",
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "description": "A human-readable message that describes the error.",
            "type": "string"
          }
        }
      },
      "IdObject": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "An element ID",
            "type": "string"
          }
        }
      },
      "ImportLabObject": {
        "required": [
          "id",
          "warnings"
        ],
        "properties": {
          "id": {
            "description": "the lab ID of the imported lab",
            "type": "string"
          },
          "warnings": {
            "description": "Warnings, if any, as Markdown",
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "UserIdPathParameter": {
        "name": "user_id",
        "in": "path",
        "description": "The unique ID of a username on this controller.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "user_1"
        }
      },
      "LabIdPathParameter": {
        "name": "lab_id",
        "in": "path",
        "description": "The unique ID of a lab on this controller.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "f9c19f"
        }
      },
      "NodeIdPathParameter": {
        "name": "node_id",
        "in": "path",
        "description": "The unique ID of a node within a particular lab.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "n0"
        }
      },
      "InterfaceIdPathParameter": {
        "name": "interface_id",
        "in": "path",
        "description": "The unique ID of an interface within a particular lab.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "i0"
        }
      },
      "LinkIdPathParameter": {
        "name": "link_id",
        "in": "path",
        "description": "The unique ID of a link within a particular lab.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "l0"
        }
      },
      "SearchQueryPathParameter": {
        "name": "search_query",
        "in": "path",
        "description": "The query parameter",
        "required": true,
        "schema": {
          "type": "string",
          "example": "iosv-1"
        }
      },
      "TagPathParameter": {
        "name": "tag",
        "in": "path",
        "description": "The unique tag",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Core"
        }
      },
      "OriginUuidQueryParameter": {
        "name": "origin_uuid",
        "in": "query",
        "description": "The optional UUID of the sender",
        "required": false,
        "schema": {
          "type": "string",
          "example": "14acdd4e-785f-4581-bf2f-e3bde67e42be"
        }
      }
    },
    "requestBodies": {
      "AuthDataBody": {
        "description": "This request body is a JSON object that holds authentication data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthData"
            }
          }
        }
      },
      "VIRL1.xImportBody": {
        "description": "This request body is a VIRL v1.x topology in the XML format defined by the virl.xsd schema.",
        "content": {
          "text/xml": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "VIRLv2ImportBody": {
        "description": "This request body is a JSON object that defines a VIRL^2 topology.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RESTTopology"
            }
          }
        }
      },
      "RESTTopologyBody": {
        "description": "This request body is a JSON object that describes a single topology.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RESTTopology"
            }
          }
        }
      },
      "CoreNodeBody": {
        "description": "A JSON object with a node's fundamental properties.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "x",
                "y",
                "label",
                "node_definition"
              ],
              "properties": {
                "x": {
                  "type": "integer"
                },
                "y": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "configuration": {
                  "type": "string"
                },
                "node_definition": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "InterfaceRequestBody": {
        "description": "A JSON object that specifies a request to create an interface on a node.  If the slot is omitted, the request indicates the *first* unused slot on the node.  If the slot is specified, the request indicates *all unallocated* slots up to and including that slot.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "node"
              ],
              "properties": {
                "node": {
                  "type": "string"
                },
                "slot": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        }
      }
    }
  }
}
